definitions:
  dto.AttendeeCancelRequest:
    properties:
      eventId:
        type: integer
      userId:
        type: integer
    required:
    - eventId
    - userId
    type: object
  dto.AttendeePaymentRequest:
    properties:
      eventId:
        type: integer
      userId:
        type: integer
    required:
    - eventId
    - userId
    type: object
  dto.AttendeeRSVPRequest:
    properties:
      eventId:
        type: integer
      newStatus:
        enum:
        - going
        - interested
        - not_going
        type: string
      userId:
        type: integer
    required:
    - eventId
    - newStatus
    - userId
    type: object
  dto.AttendeeRegisterRequest:
    properties:
      eventId:
        type: integer
      rsvpStatus:
        enum:
        - pending
        - attending
        - not_attending
        - maybe
        type: string
      ticketTypeId:
        description: <-- Make sure this line exists
        type: integer
    required:
    - eventId
    - rsvpStatus
    - ticketTypeId
    type: object
  dto.CreateEventRequestDTO:
    properties:
      address:
        type: string
      capacity:
        type: integer
      category:
        type: string
      description:
        type: string
      end_date:
        type: string
      is_paid:
        type: boolean
      name:
        type: string
      poster_url:
        type: string
      price:
        type: number
      start_date:
        type: string
      status:
        type: string
    required:
    - address
    - capacity
    - category
    - end_date
    - name
    - start_date
    type: object
  dto.CreateUserRequest:
    properties:
      age:
        maximum: 150
        minimum: 0
        type: integer
      email:
        maxLength: 100
        type: string
      name:
        maxLength: 100
        minLength: 3
        type: string
      password:
        minLength: 6
        type: string
      role:
        enum:
        - user
        - admin
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - age
    - email
    - name
    - password
    - username
    type: object
  dto.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  dto.GeneralResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
  dto.GetTransactionsByAmount:
    properties:
      max_amount:
        type: number
      min_amount:
        type: number
    type: object
  dto.GetTransactionsByDate:
    properties:
      end_date:
        type: string
      start_date:
        type: string
    required:
    - end_date
    - start_date
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      latitude:
        type: number
      longitude:
        type: number
      token:
        type: string
      user:
        $ref: '#/definitions/dto.UserResponse'
    type: object
  dto.MidtransNotification:
    properties:
      order_id:
        type: string
      payment_type:
        type: string
      status_code:
        type: string
      transaction_status:
        type: string
    type: object
  dto.PayloadTicket:
    properties:
      ids:
        items:
          type: integer
        type: array
    required:
    - ids
    type: object
  dto.UpdateEventRequestDTO:
    properties:
      address:
        type: string
      capacity:
        type: integer
      category:
        type: string
      description:
        type: string
      end_date:
        type: string
      is_paid:
        type: boolean
      name:
        type: string
      poster_url:
        type: string
      price:
        type: number
      start_date:
        type: string
      status:
        type: string
    type: object
  dto.UpdateUserRequest:
    properties:
      age:
        maximum: 150
        minimum: 0
        type: integer
      email:
        maxLength: 100
        type: string
      name:
        maxLength: 100
        minLength: 3
        type: string
      role:
        enum:
        - user
        - admin
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    type: object
  dto.UserResponse:
    properties:
      age:
        type: integer
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  model.Ticket:
    properties:
      createdAt:
        type: string
      eventId:
        type: integer
      id:
        type: integer
      price:
        type: integer
      quota:
        type: integer
      status:
        type: string
      ticketType:
        type: string
      ticketUuid:
        type: string
      updatedAt:
        type: string
    type: object
  utils.Response:
    description: Standard API response format
    properties:
      data: {}
      message:
        type: string
      status:
        type: boolean
    type: object
info:
  contact: {}
paths:
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns an access token
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Invalid request body
          schema:
            type: string
        "401":
          description: Unauthorized - Invalid credentials
          schema:
            type: string
      summary: User Login
      tags:
      - authentication
  /api/v1/attendee:
    delete:
      consumes:
      - application/json
      description: Removes an attendee from an event
      parameters:
      - description: Bearer token
        in: header
        name: authorization
        required: true
        type: string
      - description: Attendee Cancellation Data
        in: body
        name: cancellation
        required: true
        schema:
          $ref: '#/definitions/dto.AttendeeCancelRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Invalid request body
          schema:
            type: string
        "401":
          description: 'Unauthorized: Missing or invalid token'
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Cancel event registration
      tags:
      - event_attendees
    get:
      description: Retrieves registration details for a specific user and event
      parameters:
      - description: Bearer token
        in: header
        name: authorization
        required: true
        type: string
      - description: User ID
        in: query
        name: userId
        required: true
        type: integer
      - description: Event ID
        in: query
        name: eventId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Invalid query parameters
          schema:
            type: string
        "401":
          description: 'Unauthorized: Missing or invalid token'
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get attendee registration details
      tags:
      - event_attendees
    post:
      consumes:
      - application/json
      description: Adds an attendee to an event
      parameters:
      - description: Bearer token
        in: header
        name: authorization
        required: true
        type: string
      - description: Attendee Registration Data
        in: body
        name: registration
        required: true
        schema:
          $ref: '#/definitions/dto.AttendeeRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Invalid request body
          schema:
            type: string
        "401":
          description: 'Unauthorized: Missing or invalid token'
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Register for an event
      tags:
      - event_attendees
  /api/v1/attendee/confirm-payment:
    patch:
      consumes:
      - application/json
      description: Updates payment status for an event registration
      parameters:
      - description: Bearer token
        in: header
        name: authorization
        required: true
        type: string
      - description: Payment confirmation data
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/dto.AttendeePaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Invalid request body
          schema:
            type: string
        "401":
          description: 'Unauthorized: Missing or invalid token'
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Confirm payment for an event
      tags:
      - event_attendees
  /api/v1/attendee/event/{eventId}:
    get:
      description: Retrieves all attendees for a specific event
      parameters:
      - description: Bearer token
        in: header
        name: authorization
        required: true
        type: string
      - description: Event ID
        in: path
        name: eventId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Invalid event ID
          schema:
            type: string
        "401":
          description: 'Unauthorized: Missing or invalid token'
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: List attendees of an event
      tags:
      - event_attendees
  /api/v1/attendee/rsvp:
    patch:
      consumes:
      - application/json
      description: Updates an attendee's RSVP status for an event
      parameters:
      - description: Bearer token
        in: header
        name: authorization
        required: true
        type: string
      - description: RSVP Update Data
        in: body
        name: rsvp
        required: true
        schema:
          $ref: '#/definitions/dto.AttendeeRSVPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Invalid request body
          schema:
            type: string
        "401":
          description: 'Unauthorized: Missing or invalid token'
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update RSVP status
      tags:
      - event_attendees
  /api/v1/attendee/user/{userId}:
    get:
      description: Retrieves all event registrations for a specific user
      parameters:
      - description: Bearer token
        in: header
        name: authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Invalid user ID
          schema:
            type: string
        "401":
          description: 'Unauthorized: Missing or invalid token'
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: List a user's event registrations
      tags:
      - event_attendees
  /api/v1/event:
    get:
      description: Retrieves a list of all events
      parameters:
      - description: Bearer token
        in: header
        name: authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GeneralResponse'
        "401":
          description: 'Unauthorized: Missing or invalid token'
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all events
      tags:
      - events
    post:
      consumes:
      - application/json
      description: Creates a new event
      parameters:
      - description: Bearer token
        in: header
        name: authorization
        required: true
        type: string
      - description: Event Data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/dto.CreateEventRequestDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.GeneralResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: 'Unauthorized: Missing or invalid token'
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create an event
      tags:
      - events
  /api/v1/event/{id}:
    delete:
      description: Removes an event from the system
      parameters:
      - description: Bearer token
        in: header
        name: authorization
        required: true
        type: string
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid event ID
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: 'Unauthorized: Missing or invalid token'
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Event not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete event by ID
      tags:
      - events
    get:
      description: Retrieves a specific event by its ID
      parameters:
      - description: Bearer token
        in: header
        name: authorization
        required: true
        type: string
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GeneralResponse'
        "400":
          description: Invalid event ID
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: 'Unauthorized: Missing or invalid token'
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Event not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get event by ID
      tags:
      - events
    put:
      consumes:
      - application/json
      description: Modifies the details of an event
      parameters:
      - description: Bearer token
        in: header
        name: authorization
        required: true
        type: string
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated Event Data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateEventRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GeneralResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: 'Unauthorized: Missing or invalid token'
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update event by ID
      tags:
      - events
  /api/v1/event/distance:
    get:
      description: Retrieves events near the authenticated user's location
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: 'Search radius in kilometers (default: 20)'
        in: query
        name: radius
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved nearby events
          schema:
            $ref: '#/definitions/dto.GeneralResponse'
        "400":
          description: 'Invalid query parameter: radius must be a float'
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: 'Unauthorized: Missing or invalid token'
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get nearby events
      tags:
      - events
  /api/v1/events/recommendations:
    get:
      description: Retrieves a list of recommended events for the authenticated user
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: 'Number of events to return (default: 10)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved recommended events
          schema:
            $ref: '#/definitions/dto.GeneralResponse'
        "400":
          description: 'Invalid query parameter: limit must be an integer'
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: 'Unauthorized: Missing or invalid token'
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get recommended events
      tags:
      - events
  /api/v1/ticket:
    delete:
      consumes:
      - application/json
      description: Deletes tickets based on their IDs
      parameters:
      - description: Bearer token
        in: header
        name: authorization
        required: true
        type: string
      - description: List of ticket IDs to delete
        in: body
        name: ticket
        required: true
        schema:
          $ref: '#/definitions/dto.PayloadTicket'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Invalid request body
          schema:
            type: string
        "401":
          description: 'Unauthorized: Missing or invalid token'
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete tickets by ID
      tags:
      - tickets
    post:
      consumes:
      - application/json
      description: Creates a batch of tickets for an event
      parameters:
      - description: Bearer token
        in: header
        name: authorization
        required: true
        type: string
      - description: List of tickets to create
        in: body
        name: tickets
        required: true
        schema:
          items:
            $ref: '#/definitions/model.Ticket'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Invalid request body
          schema:
            type: string
        "401":
          description: 'Unauthorized: Missing or invalid token'
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create tickets
      tags:
      - tickets
  /api/v1/transaction/{id}:
    get:
      description: Retrieves a specific transaction
      parameters:
      - description: Bearer token
        in: header
        name: authorization
        required: true
        type: string
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Invalid transaction ID
          schema:
            type: string
        "401":
          description: 'Unauthorized: Missing or invalid token'
          schema:
            type: string
        "404":
          description: No transactions found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get transaction by ID
      tags:
      - transactions
  /api/v1/transaction/amount-range:
    post:
      consumes:
      - application/json
      description: Retrieves transactions within a given amount range
      parameters:
      - description: Bearer token
        in: header
        name: authorization
        required: true
        type: string
      - description: Amount Range Payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GetTransactionsByAmount'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Invalid request body
          schema:
            type: string
        "401":
          description: 'Unauthorized: Missing or invalid token'
          schema:
            type: string
        "404":
          description: No transactions found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Find transactions by Amount Range
      tags:
      - transactions
  /api/v1/transaction/date-range:
    post:
      consumes:
      - application/json
      description: Retrieves transactions within a specific date range
      parameters:
      - description: Bearer token
        in: header
        name: authorization
        required: true
        type: string
      - description: Date Range Payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GetTransactionsByDate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Invalid request body
          schema:
            type: string
        "401":
          description: 'Unauthorized: Missing or invalid token'
          schema:
            type: string
        "404":
          description: No transactions found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Find transactions by Date Range
      tags:
      - transactions
  /api/v1/transaction/event-id/{event_id}:
    get:
      description: Retrieves all transactions linked to a specific event
      parameters:
      - description: Bearer token
        in: header
        name: authorization
        required: true
        type: string
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/utils.Response'
            type: array
        "400":
          description: Invalid event ID
          schema:
            type: string
        "401":
          description: 'Unauthorized: Missing or invalid token'
          schema:
            type: string
        "404":
          description: No transactions found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get transactions by Event ID
      tags:
      - transactions
  /api/v1/transaction/notification:
    post:
      consumes:
      - application/json
      description: Processes Midtrans payment notifications and updates transaction
        status
      parameters:
      - description: Midtrans Payment Notification
        in: body
        name: notification
        required: true
        schema:
          $ref: '#/definitions/dto.MidtransNotification'
      produces:
      - application/json
      responses:
        "200":
          description: Success handle notification
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "404":
          description: No transactions found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Handle payment notification
      tags:
      - transactions
  /api/v1/transaction/status/{status}:
    get:
      description: Retrieves all transactions with a specific status
      parameters:
      - description: Bearer token
        in: header
        name: authorization
        required: true
        type: string
      - description: Transaction Status
        in: path
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Invalid status
          schema:
            type: string
        "401":
          description: 'Unauthorized: Missing or invalid token'
          schema:
            type: string
        "404":
          description: No transactions found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Find transactions by Status
      tags:
      - transactions
  /api/v1/transaction/ticket/{ticket}:
    get:
      description: Retrieves transactions by ticket information
      parameters:
      - description: Bearer token
        in: header
        name: authorization
        required: true
        type: string
      - description: Ticket
        in: path
        name: ticket
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Invalid ticket
          schema:
            type: string
        "401":
          description: 'Unauthorized: Missing or invalid token'
          schema:
            type: string
        "404":
          description: No transactions found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Find transactions by Ticket
      tags:
      - transactions
  /api/v1/transaction/transaction-id/{id}:
    get:
      description: Retrieves a transaction using its transaction ID
      parameters:
      - description: Bearer token
        in: header
        name: authorization
        required: true
        type: string
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Invalid transaction ID
          schema:
            type: string
        "401":
          description: 'Unauthorized: Missing or invalid token'
          schema:
            type: string
        "404":
          description: No transactions found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Find transaction by Transaction ID
      tags:
      - transactions
  /api/v1/transactions:
    get:
      description: Retrieves all transactions
      parameters:
      - description: Bearer token
        in: header
        name: authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: 'Unauthorized: Missing or invalid token'
          schema:
            type: string
        "404":
          description: No transactions found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all transactions
      tags:
      - transactions
  /api/v1/users:
    get:
      description: Retrieves a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UserResponse'
            type: array
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Adds a new user to the database
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Invalid request body
          schema:
            type: string
      summary: Create a new user
      tags:
      - users
  /api/v1/users/{id}:
    delete:
      description: Removes a user from the database
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: User deleted successfully
          schema:
            type: string
        "400":
          description: Invalid user ID
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Delete user by ID
      tags:
      - users
    get:
      description: Retrieves a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Invalid user ID
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Modifies an existing user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Invalid request body
          schema:
            type: string
      summary: Update user by ID
      tags:
      - users
swagger: "2.0"
